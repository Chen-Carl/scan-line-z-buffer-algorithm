int main()
{
    const int width = 1800;
    const int height = 1800;
    const float angle = 20.0f;
    const cv::Vec3f eye { 0.0f, 0.0f, 10.0f };
    
    Rasterizer rasterizer(height, width);
    auto triangles = loadModel("models/spot/spot_triangulated_good.obj");
    if (!triangles.has_value())
    {
        std::cerr << "Failed to load model" << std::endl;
        return -1;
    }

    rasterizer.setModel(Rasterizer::getModelMatrix(angle, cv::Vec3f(0, 1, 0)));
    rasterizer.setView(Rasterizer::getViewMatrix(eye));
    rasterizer.setProjection(Rasterizer::getProjectionMatrix(15.0f, 1, 0.1f, 50.0f));
    cv::Mat3f frameBuffer = rasterizer.draw(triangles.value());
    cv::Mat image(width, height, CV_32FC3, frameBuffer.data);
    cv::rotate(image, image, cv::ROTATE_90_COUNTERCLOCKWISE);
    image.convertTo(image, CV_8UC3, 1.0f);
    cv::cvtColor(image, image, cv::COLOR_RGB2BGR);
    cv::imwrite("image.png", image);
    cv::waitKey(0);
    return 0;
}